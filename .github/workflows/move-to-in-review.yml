name: Auto Move to In Review

on:
  pull_request:
    types: [opened, ready_for_review]

permissions:
  contents: read
  issues: write
  pull-requests: read
  repository-projects: write

jobs:
  move-to-in-review:
    runs-on: ubuntu-latest
    
    steps:
      - name: Move linked issues to In Review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            // Skip if PR is draft
            if (pr.draft) {
              console.log('PR is draft, skipping...');
              return;
            }
            
            console.log(`Processing PR #${pr.number}: ${pr.title}`);
            
            // Extract issue numbers from PR body and title
            const issuePattern = /#(\d+)|(?:clo(?:se|ses|sing|sed)|fix(?:es|ed|ing)?|resolve[sd]?|cloes|close)\s*#(\d+)/gi;
            const text = `${pr.title} ${pr.body || ''}`;
            const matches = [...text.matchAll(issuePattern)];
            const issueNumbers = [...new Set(matches.map(m => m[1] || m[2]).filter(Boolean))];
            
            console.log(`Found ${issueNumbers.length} linked issue(s): ${issueNumbers.join(', ')}`);
            
            if (issueNumbers.length === 0) {
              console.log('No linked issues found');
              return;
            }
            
            // Get repository info
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            
            // GraphQL query to get projects v2 for the repository
            const projectsQuery = `
              query($owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                  projectsV2(first: 10, orderBy: {field: UPDATED_AT, direction: DESC}) {
                    nodes {
                      id
                      title
                      number
                    }
                  }
                }
              }
            `;
            
            const projectsResult = await github.graphql(projectsQuery, {
              owner: repoOwner,
              repo: repoName
            });
            
            const projects = projectsResult.repository.projectsV2.nodes;
            
            if (projects.length === 0) {
              console.log('No Projects v2 found in repository');
              return;
            }
            
            const project = projects[0];
            console.log(`Using project: ${project.title} (ID: ${project.id})`);
            
            // Get project fields (including status field)
            const fieldsQuery = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const fieldsResult = await github.graphql(fieldsQuery, {
              projectId: project.id
            });
            
            // Find the Status field
            const statusField = fieldsResult.node.fields.nodes.find(
              field => field.name && field.name.toLowerCase() === 'status'
            );
            
            if (!statusField) {
              console.log('No Status field found in project');
              return;
            }
            
            console.log(`Found Status field (ID: ${statusField.id})`);
            
            // Find "In Review" option
            const inReviewOption = statusField.options.find(
              opt => opt.name.toLowerCase().includes('review')
            );
            
            if (!inReviewOption) {
              console.log('No "In Review" status option found');
              console.log('Available options:', statusField.options.map(o => o.name).join(', '));
              return;
            }
            
            console.log(`Target status: ${inReviewOption.name} (ID: ${inReviewOption.id})`);
            
            // Process each linked issue
            for (const issueNumber of issueNumbers) {
              try {
                console.log(`Processing issue #${issueNumber}...`);
                
                // Get issue node ID
                const issue = await github.rest.issues.get({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: parseInt(issueNumber)
                });
                
                // Find the item in the project
                const itemQuery = `
                  query($projectId: ID!, $issueNumber: Int!) {
                    repository(owner: "${repoOwner}", name: "${repoName}") {
                      issue(number: $issueNumber) {
                        projectItems(first: 10) {
                          nodes {
                            id
                            project {
                              id
                              title
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const itemResult = await github.graphql(itemQuery, {
                  projectId: project.id,
                  issueNumber: parseInt(issueNumber)
                });
                
                const projectItem = itemResult.repository.issue.projectItems.nodes.find(
                  item => item.project.id === project.id
                );
                
                if (!projectItem) {
                  console.log(`Issue #${issueNumber} is not in project ${project.title}, skipping...`);
                  continue;
                }
                
                console.log(`Found issue #${issueNumber} in project (Item ID: ${projectItem.id})`);
                
                // Update the status field
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: $value
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;
                
                await github.graphql(updateMutation, {
                  projectId: project.id,
                  itemId: projectItem.id,
                  fieldId: statusField.id,
                  value: {
                    singleSelectOptionId: inReviewOption.id
                  }
                });
                
                console.log(`‚úÖ Moved issue #${issueNumber} to "${inReviewOption.name}"`);
                
                // Add comment to issue
                await github.rest.issues.createComment({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: parseInt(issueNumber),
                  body: `üîÑ This issue has been automatically moved to **${inReviewOption.name}** because PR #${pr.number} was opened.\n\n[View Pull Request](${pr.html_url})`
                });
                
              } catch (error) {
                console.error(`‚ùå Error processing issue #${issueNumber}:`, error.message);
                console.error(error);
              }
            }
            
            console.log('‚ú® Automation completed successfully');
